"use client";

import "~/styles/globals.css";

import { exo } from "~/utils/fontComponents";
import Link from "next/link";
import GreenButton from "~/components/GreenButton";
import { Bars2Icon } from "@heroicons/react/24/outline";
import { usePathname, useRouter, useSearchParams } from "next/navigation";
import { createContext, useContext, useEffect, useRef, useState } from "react";

interface ScrollContextType {
  elementsRefs: { [key: string]: React.RefObject<HTMLDivElement> };
}

const ScrollContext = createContext<ScrollContextType | undefined>(undefined);

// export const metadata = {
//   title: "Create T3 App",
//   description: "Generated by create-t3-app",
//   icons: [{ rel: "icon", url: "/favicon.ico" }],
// };

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const router = useRouter();
  const [hash, setHash] = useState("#home");

  const elementsRefs: { [key: string]: React.RefObject<HTMLDivElement> } = {
    homeRef: useRef<HTMLDivElement>(null),
    advantagesRef: useRef<HTMLDivElement>(null),
    dexNodeRef: useRef<HTMLDivElement>(null),
    ecosystemRef: useRef<HTMLDivElement>(null),
    communityRef: useRef<HTMLDivElement>(null),
    partnersRef: useRef<HTMLDivElement>(null),
  };

  const hashValues = [
    "#home",
    "#advantages",
    "#dexNode",
    "#ecosystem",
    "#community",
    "#partners",
  ];

  useEffect(() => {
    const initialScroll = () => {
      const currentHash = window.location.hash || "#home";
      setHash(currentHash);
      const refKey = (currentHash.slice(1) +
        "Ref") as keyof typeof elementsRefs;
      elementsRefs[refKey]?.current?.scrollIntoView({ behavior: "smooth" });
    };
    initialScroll();
  }, []);

  const handleClick = (hashValue: string) => {
    const refKey = hashValue.slice(1) + "Ref";
    if (elementsRefs[refKey]?.current) {
      elementsRefs[refKey]?.current?.scrollIntoView({ behavior: "smooth" });
      router.push(hashValue);
    }
  };

  return (
    <html lang="en" className={`${exo.variable} scroll-smooth`}>
      <body>
        <div className="relative flex h-screen w-screen justify-center overflow-x-hidden font-exo text-white">
          <div className="fixed left-16 top-[calc(50vh-150px)] z-40 hidden justify-items-center space-y-8 md:grid">
            {hashValues.map((hashValue) => (
              <div key={hashValue} className="mt-20">
                <div
                  id={hashValue.slice(1)}
                  onClick={() => {
                    handleClick(hashValue);
                    setHash(hashValue);
                  }}
                  className={`cursor-pointer rounded-full ${hash === hashValue ? "bg-movingGlow shadow-elementGlow3 h-4 w-4" : "h-2 w-2 bg-white"}`}
                ></div>
              </div>
            ))}
          </div>
          <div className="animate-horizontalFloat md:animate-horizontalFloatPartial fixed -top-32 left-0 z-[35] h-64 w-64 rotate-45 md:-top-60 md:h-96 md:w-96 ">
            <div className="bg-movingGlow h-full w-full rotate-[35deg] blur-[100px] md:blur-[130px]"></div>
          </div>
          <div className="fixed z-50 mt-4 flex h-14 w-11/12 items-center justify-between rounded-xg bg-glassTexture px-4 backdrop-blur-xl md:h-20 md:w-full md:max-w-7xl">
            <Link href="/" className="">
              <img src="../../logo.png" alt="" className="w-36 md:w-auto" />
            </Link>
            <div className="flex space-x-6">
              <Link
                href="#home"
                className={`hidden ease-in-out hover:text-bannerGradientStart md:block`}
              >
                Main
              </Link>
              <Link
                href="#advantages"
                className={`hidden ease-in-out hover:text-bannerGradientStart md:block`}
              >
                Advantages
              </Link>
              <Link
                href="#dexNode"
                className={`hidden ease-in-out hover:text-bannerGradientStart md:block`}
              >
                How to start
              </Link>
              <Link
                href="#ecosystem"
                className={`hidden ease-in-out hover:text-bannerGradientStart md:block`}
              >
                Ecosystem
              </Link>
              <Link
                href="#community"
                className={`hidden ease-in-out hover:text-bannerGradientStart md:block`}
              >
                Community
              </Link>
              <Link
                href="#partners"
                className={`hidden ease-in-out hover:text-bannerGradientStart md:block`}
              >
                Become a partner
              </Link>
            </div>
            <GreenButton
              text={"Connect Wallet"}
              className="hidden w-48 md:block"
            />
            <Bars2Icon className="block h-7 w-7 md:hidden" />
          </div>
          <img
            src="../../backgroundPng.png"
            alt="background"
            className="fixed -z-10 h-full w-full object-cover"
          />
          <ScrollContext.Provider value={{ elementsRefs }}>
            <div className="h-full w-full">{children}</div>
          </ScrollContext.Provider>
        </div>
      </body>
    </html>
  );
}

export const useScroll = () => {
  const context = useContext(ScrollContext);
  if (context === undefined) {
    throw new Error("useScroll must be used within a ScrollProvider");
  }
  return context;
};
